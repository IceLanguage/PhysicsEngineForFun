%module(directors = "1") PhysicsEngineForFun

%include <std_vector.i>

%{
	#include "../ParticleWorld.h"
	#include "../ParticleConstraint.h"
	#include "../ParticleLink.h"
	#include "../RigidBodyWorld.h"
%}

%feature("director") IParticleContactGenerator;
%feature("director") IParticleForceGenerator;
%feature("director") IRigidBodyForceGenerator;

struct Vector3
{
public:
	Vector3() : x(0), y(0), z(0) {}
	Vector3(const float x, const float y, const float z)
		: x(x), y(y), z(z) {}
	float x, y, z;
};

struct Quaternion
{
public:
	Quaternion();
	Quaternion(const float r, const float i, const float j, const float k);
	float Get_r() const;
	float Get_i() const;
	float Get_j() const;
	float Get_k() const;
	void Set_r(float value);
	void Set_i(float value);
	void Set_j(float value);
	void Set_k(float value);
	void Normalize();
	void RotateByVector(const Vector3& vector);
	void AddScaledVector(const Vector3& vector, float scale);
};

struct Matrix3
{
public:
	Matrix3();
	Matrix3(float c0, float c1, float c2, float c3, float c4, float c5,
		float c6, float c7, float c8);
	void SetInverse(const Matrix3 &m);
	void Invert();
	Matrix3 Inverse() const;
	void SetTranspose(const Matrix3 &m);
	Matrix3 Transpose() const;
	void SetOrientation(const Quaternion &q);
	Vector3 Transform(const Vector3 &vector) const;
	void SetInertiaTensorCoeffs(float ix, float iy, float iz,
		float ixy = 0, float ixz = 0, float iyz = 0);//Sets the value of the matrix from inertia tensor values.
	void SetBlockInertiaTensor(const Vector3 &halfSizes, float mass);
	static Matrix3 linearInterpolate(const Matrix3& a, const Matrix3& b, float prop);
};

struct Matrix4
{
public:
	Matrix4();
	float GetDeterminant() const;
	void SetOrientationAndPos(const Quaternion &q, const Vector3 &pos);
	Vector3 Transform(const Vector3 &vector) const;
	Vector3 TransformInverse(const Vector3 &vector) const;
	Vector3 TransformDirection(const Vector3 &vector) const;
	Vector3 TransformInverseDirection(const Vector3 &vector) const;
	Matrix3 GetTransposeMatrix3() const;
};

class Particle
{
public:
	void SetMass(float mass);
	float GetMass() const;
	void Integrate(float duration);
	void AddForce(const Vector3 &force);
	void ClearAccumulator();

	Vector3 position;
	Vector3 velocity;
	Vector3 acceleration;
	float damping;
};

class ParticleContact
{
public:
	void Resolve(float duration);
	float CalculateSeparatingVelocity() const;
	float restitutionCoefficient;
	float penetrationDepth;
	Vector3 contactNormal;
	Particle * particle0, *particle1;
};

class IParticleContactGenerator
{
public:
	virtual bool AddContact(ParticleContact *contact) const;
};

class ParticleLink : public IParticleContactGenerator
{
public:
	float GetCurrentLength() const;
	virtual bool AddContact(ParticleContact *contact) const;
	Particle * particle0, *particle1;
};

class ParticleCable : public ParticleLink
{
public:
	virtual bool AddContact(ParticleContact *contact) const;
	float maxLength;
	float restitutionCoefficient;
};

class ParticleConnectingRod : public ParticleLink
{
public:
	virtual bool AddContact(ParticleContact *contact) const;
	float Length;
};

class ParticleConstraint : public IParticleContactGenerator
{
public:
	float GetCurrentLength() const;
	virtual bool AddContact(ParticleContact *contact) const;
	Particle * particle;
	Vector3 anchorPoint;
};

class ParticleCableConstraint : public ParticleConstraint
{
public:
	virtual bool AddContact(ParticleContact *contact) const;
	float maxLength;
	float restitutionCoefficient;
};

class ParticleConnectingRodConstraint : public ParticleConstraint
{
public:
	virtual bool AddContact(ParticleContact *contact) const;
	float Length;
};

class IParticleForceGenerator
{
public:
	virtual void UpdateForce(Particle *particle, float duration);
};

class ParticleForceRegistry
{
public:
	void Add(Particle* particle, IParticleForceGenerator *fg);
	void Remove(Particle* particle, IParticleForceGenerator *fg);
	void Clear();
	void UpdateForces(float duration);
};

%template(VectorParticle) std::vector<Particle*>;
%template(VectorIParticleContactGenerator) std::vector<IParticleContactGenerator*>;

class ParticleWorld
{
public:
	ParticleWorld(unsigned int maxContacts, unsigned int contactsResolverIterations = 0);
	void Start();
	void RunPhysics(float duration, bool needRestart = true);
	std::vector<Particle*> particles;
	std::vector<IParticleContactGenerator*> contactGenerators;
	ParticleForceRegistry registry;
};

class RigidBody
{
public:
	void CalculateDerivedData();
	void SetInertiaTensor(const Matrix3 &inertiaTensor);
	void AddForce(const Vector3 &force);
	void AddForceAtBodyPoint(const Vector3 &force, const Vector3 &point);
	void AddForceAtPoint(const Vector3 &force, const Vector3 &point);
	void ClearAccumulator();
	void Integrate(float duration);
	Vector3 GetPointInWorldSpace(const Vector3 &point) const;
	bool hasFiniteMass() const;
	float GetMass() const;
	void SetMass(float mass);
	Quaternion orientation;
	Vector3 position;
	Vector3 velocity;
	Vector3 rotation;
	Vector3 acceleration;
	Matrix4 transformMatrix;
	float angularDamping;
	float linearDamping;
};

class IRigidBodyForceGenerator
{
public:
	virtual void UpdateForce(RigidBody * body, float duration);
};

class AeroForceOnRigidBody : public IRigidBodyForceGenerator
{
public:
	AeroForceOnRigidBody(const Matrix3 &tensor, const Vector3 &position,
		const Vector3 *windspeed);
	virtual void UpdateForce(RigidBody *body, float duration);
};

class AeroForceControlOnRigidBody : public AeroForceOnRigidBody
{
public:
	AeroForceControlOnRigidBody(const Matrix3 &base,
		const Matrix3 &min, const Matrix3 &max,
		const Vector3 &position, const Vector3 *windspeed);
	virtual void UpdateForce(RigidBody *body, float duration);
	float controlSetting;
};

class BuoyancyOnRigidBody : public IRigidBodyForceGenerator
{
public:
	BuoyancyOnRigidBody(const Vector3 &centerOfBuoyancy,
		float maxDepth, float volume, float waterSurfaceHeight,
		float liquidDensity = 1000.0f);
	virtual void UpdateForce(RigidBody *body, float duration);
};

class RigidBodyForceRegistry
{
public:
	void Add(RigidBody* body, IRigidBodyForceGenerator *fg);
	void Remove(RigidBody* body, IRigidBodyForceGenerator *fg);
	void Clear();
	void UpdateForces(float duration);
};