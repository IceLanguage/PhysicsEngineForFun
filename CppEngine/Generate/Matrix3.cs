//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Matrix3 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Matrix3(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Matrix3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Matrix3() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PhysicsEngineForFunPINVOKE.delete_Matrix3(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Matrix3() : this(PhysicsEngineForFunPINVOKE.new_Matrix3__SWIG_0(), true) {
  }

  public Matrix3(float c0, float c1, float c2, float c3, float c4, float c5, float c6, float c7, float c8) : this(PhysicsEngineForFunPINVOKE.new_Matrix3__SWIG_1(c0, c1, c2, c3, c4, c5, c6, c7, c8), true) {
  }

  public void SetInverse(Matrix3 m) {
    PhysicsEngineForFunPINVOKE.Matrix3_SetInverse(swigCPtr, Matrix3.getCPtr(m));
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Invert() {
    PhysicsEngineForFunPINVOKE.Matrix3_Invert(swigCPtr);
  }

  public Matrix3 Inverse() {
    Matrix3 ret = new Matrix3(PhysicsEngineForFunPINVOKE.Matrix3_Inverse(swigCPtr), true);
    return ret;
  }

  public void SetTranspose(Matrix3 m) {
    PhysicsEngineForFunPINVOKE.Matrix3_SetTranspose(swigCPtr, Matrix3.getCPtr(m));
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix3 Transpose() {
    Matrix3 ret = new Matrix3(PhysicsEngineForFunPINVOKE.Matrix3_Transpose(swigCPtr), true);
    return ret;
  }

  public void SetOrientation(Quaternion q) {
    PhysicsEngineForFunPINVOKE.Matrix3_SetOrientation(swigCPtr, Quaternion.getCPtr(q));
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 Transform(Vector3 vector) {
    Vector3 ret = new Vector3(PhysicsEngineForFunPINVOKE.Matrix3_Transform(swigCPtr, Vector3.getCPtr(vector)), true);
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInertiaTensorCoeffs(float ix, float iy, float iz, float ixy, float ixz, float iyz) {
    PhysicsEngineForFunPINVOKE.Matrix3_SetInertiaTensorCoeffs__SWIG_0(swigCPtr, ix, iy, iz, ixy, ixz, iyz);
  }

  public void SetInertiaTensorCoeffs(float ix, float iy, float iz, float ixy, float ixz) {
    PhysicsEngineForFunPINVOKE.Matrix3_SetInertiaTensorCoeffs__SWIG_1(swigCPtr, ix, iy, iz, ixy, ixz);
  }

  public void SetInertiaTensorCoeffs(float ix, float iy, float iz, float ixy) {
    PhysicsEngineForFunPINVOKE.Matrix3_SetInertiaTensorCoeffs__SWIG_2(swigCPtr, ix, iy, iz, ixy);
  }

  public void SetInertiaTensorCoeffs(float ix, float iy, float iz) {
    PhysicsEngineForFunPINVOKE.Matrix3_SetInertiaTensorCoeffs__SWIG_3(swigCPtr, ix, iy, iz);
  }

  public void SetBlockInertiaTensor(Vector3 halfSizes, float mass) {
    PhysicsEngineForFunPINVOKE.Matrix3_SetBlockInertiaTensor(swigCPtr, Vector3.getCPtr(halfSizes), mass);
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix3 linearInterpolate(Matrix3 a, Matrix3 b, float prop) {
    Matrix3 ret = new Matrix3(PhysicsEngineForFunPINVOKE.Matrix3_linearInterpolate(Matrix3.getCPtr(a), Matrix3.getCPtr(b), prop), true);
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
