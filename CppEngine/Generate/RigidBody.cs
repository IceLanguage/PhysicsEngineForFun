//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class RigidBody : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RigidBody(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RigidBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RigidBody() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PhysicsEngineForFunPINVOKE.delete_RigidBody(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void CalculateDerivedData() {
    PhysicsEngineForFunPINVOKE.RigidBody_CalculateDerivedData(swigCPtr);
  }

  public void SetInertiaTensor(Matrix3 inertiaTensor) {
    PhysicsEngineForFunPINVOKE.RigidBody_SetInertiaTensor(swigCPtr, Matrix3.getCPtr(inertiaTensor));
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddForce(Vector3 force) {
    PhysicsEngineForFunPINVOKE.RigidBody_AddForce(swigCPtr, Vector3.getCPtr(force));
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddForceAtBodyPoint(Vector3 force, Vector3 point) {
    PhysicsEngineForFunPINVOKE.RigidBody_AddForceAtBodyPoint(swigCPtr, Vector3.getCPtr(force), Vector3.getCPtr(point));
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddForceAtPoint(Vector3 force, Vector3 point) {
    PhysicsEngineForFunPINVOKE.RigidBody_AddForceAtPoint(swigCPtr, Vector3.getCPtr(force), Vector3.getCPtr(point));
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearAccumulator() {
    PhysicsEngineForFunPINVOKE.RigidBody_ClearAccumulator(swigCPtr);
  }

  public void Integrate(float duration) {
    PhysicsEngineForFunPINVOKE.RigidBody_Integrate(swigCPtr, duration);
  }

  public Vector3 GetPointInWorldSpace(Vector3 point) {
    Vector3 ret = new Vector3(PhysicsEngineForFunPINVOKE.RigidBody_GetPointInWorldSpace(swigCPtr, Vector3.getCPtr(point)), true);
    if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasFiniteMass() {
    bool ret = PhysicsEngineForFunPINVOKE.RigidBody_hasFiniteMass(swigCPtr);
    return ret;
  }

  public float GetMass() {
    float ret = PhysicsEngineForFunPINVOKE.RigidBody_GetMass(swigCPtr);
    return ret;
  }

  public void SetMass(float mass) {
    PhysicsEngineForFunPINVOKE.RigidBody_SetMass(swigCPtr, mass);
  }

  public Quaternion orientation {
    set {
      PhysicsEngineForFunPINVOKE.RigidBody_orientation_set(swigCPtr, Quaternion.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.RigidBody_orientation_get(swigCPtr);
      Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
      return ret;
    } 
  }

  public Vector3 position {
    set {
      PhysicsEngineForFunPINVOKE.RigidBody_position_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.RigidBody_position_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 velocity {
    set {
      PhysicsEngineForFunPINVOKE.RigidBody_velocity_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.RigidBody_velocity_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 rotation {
    set {
      PhysicsEngineForFunPINVOKE.RigidBody_rotation_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.RigidBody_rotation_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 acceleration {
    set {
      PhysicsEngineForFunPINVOKE.RigidBody_acceleration_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.RigidBody_acceleration_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Matrix4 transformMatrix {
    set {
      PhysicsEngineForFunPINVOKE.RigidBody_transformMatrix_set(swigCPtr, Matrix4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.RigidBody_transformMatrix_get(swigCPtr);
      Matrix4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix4(cPtr, false);
      return ret;
    } 
  }

  public float angularDamping {
    set {
      PhysicsEngineForFunPINVOKE.RigidBody_angularDamping_set(swigCPtr, value);
    } 
    get {
      float ret = PhysicsEngineForFunPINVOKE.RigidBody_angularDamping_get(swigCPtr);
      return ret;
    } 
  }

  public float linearDamping {
    set {
      PhysicsEngineForFunPINVOKE.RigidBody_linearDamping_set(swigCPtr, value);
    } 
    get {
      float ret = PhysicsEngineForFunPINVOKE.RigidBody_linearDamping_get(swigCPtr);
      return ret;
    } 
  }

  public RigidBody() : this(PhysicsEngineForFunPINVOKE.new_RigidBody(), true) {
  }

}
