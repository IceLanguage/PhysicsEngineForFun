//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ParticleWorld : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ParticleWorld(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ParticleWorld obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ParticleWorld() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PhysicsEngineForFunPINVOKE.delete_ParticleWorld(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ParticleWorld(uint maxContacts, uint contactsResolverIterations) : this(PhysicsEngineForFunPINVOKE.new_ParticleWorld__SWIG_0(maxContacts, contactsResolverIterations), true) {
  }

  public ParticleWorld(uint maxContacts) : this(PhysicsEngineForFunPINVOKE.new_ParticleWorld__SWIG_1(maxContacts), true) {
  }

  public void Start() {
    PhysicsEngineForFunPINVOKE.ParticleWorld_Start(swigCPtr);
  }

  public void RunPhysics(float duration, bool needRestart) {
    PhysicsEngineForFunPINVOKE.ParticleWorld_RunPhysics__SWIG_0(swigCPtr, duration, needRestart);
  }

  public void RunPhysics(float duration) {
    PhysicsEngineForFunPINVOKE.ParticleWorld_RunPhysics__SWIG_1(swigCPtr, duration);
  }

  public VectorParticle particles {
    set {
      PhysicsEngineForFunPINVOKE.ParticleWorld_particles_set(swigCPtr, VectorParticle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.ParticleWorld_particles_get(swigCPtr);
      VectorParticle ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorParticle(cPtr, false);
      return ret;
    } 
  }

  public VectorIParticleContactGenerator contactGenerators {
    set {
      PhysicsEngineForFunPINVOKE.ParticleWorld_contactGenerators_set(swigCPtr, VectorIParticleContactGenerator.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.ParticleWorld_contactGenerators_get(swigCPtr);
      VectorIParticleContactGenerator ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorIParticleContactGenerator(cPtr, false);
      return ret;
    } 
  }

  public ParticleForceRegistry registry {
    set {
      PhysicsEngineForFunPINVOKE.ParticleWorld_registry_set(swigCPtr, ParticleForceRegistry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.ParticleWorld_registry_get(swigCPtr);
      ParticleForceRegistry ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleForceRegistry(cPtr, false);
      return ret;
    } 
  }

}
