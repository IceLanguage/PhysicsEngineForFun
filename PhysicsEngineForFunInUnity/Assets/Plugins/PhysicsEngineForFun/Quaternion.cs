//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysicsEngineForFun
{
    public class Quaternion : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal Quaternion(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Quaternion obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~Quaternion()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        PhysicsEngineForFunPINVOKE.delete_Quaternion(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public Quaternion() : this(PhysicsEngineForFunPINVOKE.new_Quaternion__SWIG_0(), true)
        {
        }

        public Quaternion(float r, float i, float j, float k) : this(PhysicsEngineForFunPINVOKE.new_Quaternion__SWIG_1(r, i, j, k), true)
        {
        }

        public float Get_r()
        {
            float ret = PhysicsEngineForFunPINVOKE.Quaternion_Get_r(swigCPtr);
            return ret;
        }

        public float Get_i()
        {
            float ret = PhysicsEngineForFunPINVOKE.Quaternion_Get_i(swigCPtr);
            return ret;
        }

        public float Get_j()
        {
            float ret = PhysicsEngineForFunPINVOKE.Quaternion_Get_j(swigCPtr);
            return ret;
        }

        public float Get_k()
        {
            float ret = PhysicsEngineForFunPINVOKE.Quaternion_Get_k(swigCPtr);
            return ret;
        }

        public void Set_r(float value)
        {
            PhysicsEngineForFunPINVOKE.Quaternion_Set_r(swigCPtr, value);
        }

        public void Set_i(float value)
        {
            PhysicsEngineForFunPINVOKE.Quaternion_Set_i(swigCPtr, value);
        }

        public void Set_j(float value)
        {
            PhysicsEngineForFunPINVOKE.Quaternion_Set_j(swigCPtr, value);
        }

        public void Set_k(float value)
        {
            PhysicsEngineForFunPINVOKE.Quaternion_Set_k(swigCPtr, value);
        }

        public void Normalize()
        {
            PhysicsEngineForFunPINVOKE.Quaternion_Normalize(swigCPtr);
        }

        public void RotateByVector(Vector3 vector)
        {
            PhysicsEngineForFunPINVOKE.Quaternion_RotateByVector(swigCPtr, Vector3.getCPtr(vector));
            if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
        }

        public void AddScaledVector(Vector3 vector, float scale)
        {
            PhysicsEngineForFunPINVOKE.Quaternion_AddScaledVector(swigCPtr, Vector3.getCPtr(vector), scale);
            if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
        }

    }
}