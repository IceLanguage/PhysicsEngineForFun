//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysicsEngineForFun
{
    public class Particle : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal Particle(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Particle obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~Particle()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        PhysicsEngineForFunPINVOKE.delete_Particle(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public void SetMass(float mass)
        {
            PhysicsEngineForFunPINVOKE.Particle_SetMass(swigCPtr, mass);
        }

        public float GetMass()
        {
            float ret = PhysicsEngineForFunPINVOKE.Particle_GetMass(swigCPtr);
            return ret;
        }

        public void Integrate(float duration)
        {
            PhysicsEngineForFunPINVOKE.Particle_Integrate(swigCPtr, duration);
        }

        public void AddForce(Vector3 force)
        {
            PhysicsEngineForFunPINVOKE.Particle_AddForce(swigCPtr, Vector3.getCPtr(force));
            if (PhysicsEngineForFunPINVOKE.SWIGPendingException.Pending) throw PhysicsEngineForFunPINVOKE.SWIGPendingException.Retrieve();
        }

        public void ClearAccumulator()
        {
            PhysicsEngineForFunPINVOKE.Particle_ClearAccumulator(swigCPtr);
        }

        public Vector3 position
        {
            set
            {
                PhysicsEngineForFunPINVOKE.Particle_position_set(swigCPtr, Vector3.getCPtr(value));
            }
            get
            {
                global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.Particle_position_get(swigCPtr);
                Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
                return ret;
            }
        }

        public Vector3 velocity
        {
            set
            {
                PhysicsEngineForFunPINVOKE.Particle_velocity_set(swigCPtr, Vector3.getCPtr(value));
            }
            get
            {
                global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.Particle_velocity_get(swigCPtr);
                Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
                return ret;
            }
        }

        public Vector3 acceleration
        {
            set
            {
                PhysicsEngineForFunPINVOKE.Particle_acceleration_set(swigCPtr, Vector3.getCPtr(value));
            }
            get
            {
                global::System.IntPtr cPtr = PhysicsEngineForFunPINVOKE.Particle_acceleration_get(swigCPtr);
                Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
                return ret;
            }
        }

        public float damping
        {
            set
            {
                PhysicsEngineForFunPINVOKE.Particle_damping_set(swigCPtr, value);
            }
            get
            {
                float ret = PhysicsEngineForFunPINVOKE.Particle_damping_get(swigCPtr);
                return ret;
            }
        }

        public Particle() : this(PhysicsEngineForFunPINVOKE.new_Particle(), true)
        {
        }

    }

}
