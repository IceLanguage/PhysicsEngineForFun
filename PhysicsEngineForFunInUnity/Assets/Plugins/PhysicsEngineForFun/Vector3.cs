//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


namespace PhysicsEngineForFun
{
    public class Vector3 : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal Vector3(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vector3 obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~Vector3()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        PhysicsEngineForFunPINVOKE.delete_Vector3(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public Vector3() : this(PhysicsEngineForFunPINVOKE.new_Vector3__SWIG_0(), true)
        {
        }

        public Vector3(float x, float y, float z) : this(PhysicsEngineForFunPINVOKE.new_Vector3__SWIG_1(x, y, z), true)
        {
        }

        public float x
        {
            set
            {
                PhysicsEngineForFunPINVOKE.Vector3_x_set(swigCPtr, value);
            }
            get
            {
                float ret = PhysicsEngineForFunPINVOKE.Vector3_x_get(swigCPtr);
                return ret;
            }
        }

        public float y
        {
            set
            {
                PhysicsEngineForFunPINVOKE.Vector3_y_set(swigCPtr, value);
            }
            get
            {
                float ret = PhysicsEngineForFunPINVOKE.Vector3_y_get(swigCPtr);
                return ret;
            }
        }

        public float z
        {
            set
            {
                PhysicsEngineForFunPINVOKE.Vector3_z_set(swigCPtr, value);
            }
            get
            {
                float ret = PhysicsEngineForFunPINVOKE.Vector3_z_get(swigCPtr);
                return ret;
            }
        }

    }
}